#+title: Making a tiny Bootloader
#+author: Midnight1938
#+date: <2023-06-29 Thu>

After spending ages thinking about making progress in the low level area. Its time to make a bootloader. Thanks [[https:joe-bergeron.com/posts/Writing%20a%20Tiny%20x86%20Bootloader/][Joe Bergeron]]

* Whats a Bootloader
When the system turns on, the process of turning it into a functional heat box from a bunch of semiconductors and metal pieces takes a number of steps.
It first looks at the ~0xFFFFFFF0~ address for the BIOS code, which is usually on a ROM somewhere on the system. The BIOS then POSTs and looks for bootable media. The BIOS accepts some medium as an acceptable boot device, if its boot sector, the first 512 bytes of the disk are readable and end in the exact bytes 0x55AA, which constitutes the boot signature for the medium.
If the BIOS deems some drive bootable, then it loads the first 512 bytes of the drive into memory address 0x007C00, and transfers program control to this address with a jump instruction to the processor.

Most modern BIOS programs are pretty robust. For example, if the BIOS recognizes several drives with appropriate boot sectors, it will boot from the one with the highest pre-assigned priority; which is exactly why most computers default to booting from USB rather than hard disk if a bootable USB drive is inserted on boot. Read more from Joe, this is all i care for.

We use [[https:en.wikipedia.org/wiki/Netwide_Assembler][NASM]] flavour for the project. As far as testing goes, it's very much possible to just dd the compiled assembly onto the first 512 bytes of a USB drive and boot the computer from that.
But that doesn't have a very fast turnaround. [[https:en.wikipedia.org/wiki/Bochs][Bochs]] is a neat little x86 IBM-PC compatible emulator which has a bunch of useful features which will be used for testing.

* Installation
Install the =NASM= compiler and the =Bochs= tester. On SUSE Im able to run:
#+begin_src bash
  sudo zypper in -y nasm
  opi bochs
#+end_src
* Coding it
** Bootloader stack
Start off by writing a stack for the bootloader to use. The x86 processors have a number of segment registers, which are used to store the beginning of a 64k segment of memory. But in real life memory is added using a /logical address/, rather than the physical one. It also consists of 64K segments of a logical address and should be divided by 16. So with a logical address beginning at 64K segment A and offset B, the reconsturcted physical address would become A*0x10+B.
1. Lets say the processor has a *DS register* for the data segment.
   Since our code is at 0x7C00, the data segment may begin at 0x7C0, which we then set.
   #+begin_src nasm
     mov ax, 0x7C0
     mov ds, ax
   #+end_src
2. We then have to load the segment into another register (here, *ax*) first. But we cant directly steck it in the segment register. So start the storage for the stack directly after the 512 bytes of the bootloader.
   Since the bootloader extends from 0x7C00 for 512 bytes, to 0x7E00, the *stack segment*, SS, will be 0x7E0.
   #+begin_src nasm
     mov ax, 0x7E0
     mov ss, ax
   #+end_src
3. On x86 architectures the *stack pointer* decreases, so we have to set the initial stack pointer to a number of bytes past the stack segment, equal to the desired stack size. Since the stack segment can access 64K of memory, make an 8K stack by setting SP to 0x2000
   #+begin_src nasm
     mov sp, 0x2000
   #+end_src

We are now free to use the standard calling convention in order of pass control of to different functions safely.
We can =push= in order to push /caller-saved/ registers on the stack, pass parameters to the callee again with =push= then use =call= to save the current program counter to the stack, and perform an unconditional jump to the given label.

** Create screen functions
Lets now figure out a way to clear the screen, move the pointer, and write text. This is where *real mode* and *BIOS interrupt* calls come into play. By storing registers with certain parameters and then sending a particular opcode to the BIOS as an interrupt, we can do a bunch of cool stuff.
Like, by storing 0x07 in the *AH* register and sending interrupt code 0x10 to the BIOS, we can scroll the window down by a number of rows. See specs [[https:ctyme.com/intr/rb-0097.htm][here]].
If you look at the spec, you'll see that we need to set AH to 0x07, and AL to 0x00. the value of register BH refers to the [[https:en.wikipedia.org/wiki/BIOS_color_attributes][BIOS color attribute]], which for our purposes will be black background (0x0) behind light-gray (0x7) text, so we must set BH to 0x07.
Registers CX and DX refer to the subsection of the screen that we want to clear.
The standard number of character rows/cols here is 25/80, so we set CH and CL to 0x00 to set (0,0) as the top left of the screen to clear, and DH as 0x18 = 24, DL as 0x4f = 79. Putting this all together in a function, we get the following snippet.
#+begin_src nasm
  clearscreen:
          push bp
          mov bp, sp
          pusha

          mov ah, 0x07            ; tells BIOS to scroll down the window
          mov al, 0x00            ; clear the window
          mov bh, 0x07            ; white on black
          mov cx, 0x00            ; make top left to screen (0,0)
          mov dh, 0x18            ; 18h = 24 character rows
          mov dl, 0x4f            ; 4fh = 79 columns of chars
          int 0x10                ; video interrupt

          popa
          mov sp, bp
          pop bp
          ret
#+end_src
The overhead at the beginning and end of the subroutine allows us to adhere to the standard calling convention between caller and callee. *pusha* and *popa* push and pop all general registers on and off the stack.
We save the caller's base pointer (4 bytes), and update the base pointer with the new stack pointer. At the very end, we essentially mirror this process.
** Move the cursor
Now we write a subroutine for moving the cursor to an arbitrary (row,col) position on the screen.
[[https:ctyme.com/intr/rb-0087.htm][Int 10/AH=02h]] does this nicely. This subroutine will be slightly different, since we'll need to pass it an argument.
According to the spec, we must set register DX to a two byte value, the first representing the desired row, and second the desired column.
- *AH* has to be 0x02
- *BH* represents the page number we want to move the cursor to.
  This parameter has to do with the fact that the BIOS allows you to draw to off-screen pages, in order to facilitate smoother visual transitions by rendering off-screen content before it is shown to the user.
  This is called /multiple/ or /double buffering/. We don't really care about this, however, so we'll just use the default page of 0.
#+begin_src nasm
  movecursor:
          push bp
          mov bp, sp
          mov dx, [bp+4]          ; get argument from stack. |bp| = 2, |arg| = 2
          mov ah, 0x02            ; set cursor position
          mov bh, 0x00            ; page 0, doesnt really matter, not double buffering
          int 0x10

          popa
          mov, sp, bp
          pop bp
          ret
#+end_src
The only thing that might look unusual is the mov dx, [bp+4]. This moves the argument we passed into the DX register. The reason we offset by 4 is that the contents of bp takes up 2 bytes on the stack, and the argument takes up two bytes, so we have to offset a total of 4 bytes from the actual address of bp.
Note that the caller has the responsibility to clean the stack after the callee returns, which amounts to removing the arguments from the top of the stack by moving the stack pointer.
** Write out sucess
The final subroutine we want to write is simply one that, given a pointer to the beginning of a string, prints that string to the screen beginning at the current cursor position. Using the video interrupt code with [[https:ctyme.com/intr/rb-0106.htm][AH=0Eh]] works nicely. First off, we can define some data and store a pointer to its starting address with something that looks like ~msg: "Oh! Boy syrup!", 0~
The 0 at the end terminates the string with a null character, so we'll know when the string is done. We can reference the address of this string with msg. Then, the rest is pretty much like what we just saw with movecursor.
#+begin_src nasm
  print:
          push bp
          mov bp, sp
          pusha
          mov s1, [bp+4]          ; grab pointer to the data
          mov bh, 0x90            ; page number 0
          mov bl, 0x00            ; fg colour, irrelevant in text mode
          mov ah, 0x0E            ; print character to TTY / CLI
  .char:
          mov al, [si]            ; get current char from pointer position
          mov si, 1               ; keep incrementing si till null char
          or al, 0
          je .return              ; end if string is done
          int 0x10                ; print characters if we are not done
          jmp .char               ; keep looping this process
  .return:
          popa
          mov sp, bp
          pop bp
          ret

  ; Ofcourse the actual message
  msg: db "Oh boy the assembly world!", 0
#+end_src

** Final program differences
The final program is the other ~.asm~ file in this folder.
Some things might not be familiar in there.
+ The first line of the program tells the assembler that we're working in 16-bit real mode.
+ The lines *cli* and *hlt* after we finish printing tell the processor not to accept interrupts and to halt processing.
+ Finally, remember that the code in a bootsector has to be exactly 512 bytes, ending in '0xAA55'?
  The last two lines pad the binary to a length of 510 bytes, and make sure the file ends with the appropriate boot signature.

* Compilation and testing
1. Run the following command to compile the program into code
   #+begin_src bash
     nasm -f bin boot.asm boot.com
   #+end_src
** Bosch runner
Then, in the same directory, whip up a file called bochsrc.txt, and fill it up with the following
   #+begin_src yaml
     megs: 32
     romimage: file=/usr/share/bochs/BIOS-bochs-latest, address=0xfffe0000
     vgaromimage: file=/usr/share/bochs/VGABIOS-lgpl-latest
     floppya: 1_44=boot.com, status=inserted
     boot: a
     log: bochsout.txt
     mouse: enabled=0
     display_library: x, options="gui_debug"
   #+end_src
   This just contains some simple config stuff for Bochs, nothing too fancy. Basically you're just telling Bochs that your boot medium is a 1.44 Meg floppy with your binary loaded on it. Finally, you can just call
   #+begin_src bash
     bochs -f bochsrc.txt
   #+end_src
** USB runner
If you have a USB drive laying around anywhere, you can do something marginally cooler.
Plug it in and find out where it lives (use /dmesg/ or something). Mine was on /dev/sdb.
Using dd, run:
#+begin_src bash
  sudo dd if=boot.com of=/dev/sdb bs=512 count=1
#+end_src
This will copy the first 512 bytes of your bootloader (read: all of it), to the first 512 bytes of your USB drive.
If you want to make sure everything copied over all well and good, you can let /if=/dev/sdb/ and /of=test.com/, then /diff/ the two files. They should be identical.
Then, it's just a matter of restarting your computer (and potentially changing boot priority to boot from USB first), and you should see the same boring text you see in an emulator just minutes ago. Well done.

It should be said, again, that most /real/ bootloaders are orders of magnitutde more complex than this one, however this is a pretty good proof of concept/learning tool.
